{
  "complexity_metrics": {
    "loc": 8057,
    "sloc": 6126,
    "lloc": 4298,
    "cloc": 477,
    "mcc": 690,
    "n_smell": 202,
    "comment_ratio": 7,
    "mcc_per_thlines": 160
  },
  "metrics": {
    "number_of_string": 1544,
    "number_of_string_template": 127,
    "number_of_inline_func": 1,
    "number_of_inferred_fun": 9,
    "number_of_inferred_var": 471,
    "number_of_objects_declarations": 30,
    "number_of_companion_objects": 16,
    "number_of_singletons": 8,
    "number_of_declaration": 515,
    "number_of_var_declaration": 515,
    "number_of_func_call": 2059,
    "number_of_arguments": 2473,
    "number_of_parameters": 732,
    "number_of_qualified_expressions": 2128,
    "number_of_inheritances": 127,
    "number_of_unsafe_calls": 46,
    "number_of_safe_calls": 31,
    "number_of_destructuring_declarations": 0,
    "number_of_when_expressions": 5,
    "number_of_functions_with_default_value": 92,
    "number_of_function_call_with_named_value": 303,
    "number_of_named_argument": 1040,
    "number_of_argument_with_default_value": 348,
    "number_of_overloaded_op": 5,
    "number_of_extension_function": 43,
    "number_of_properties_delegation": 8,
    "number_of_super_delegation": 1,
    "number_of_ranges": 2,
    "number_of_lambdas": 305,
    "number_of_possible_smart_casts": 1,
    "number_of_data_class": 38,
    "number_of_properties": 515,
    "number_of_functions": 505,
    "number_of_interfaces": 2,
    "number_of_classes": 233,
    "number_of_packages": 11,
    "number_of_kts_files": 0,
    "number_of_kt_files": 187
  },
  "findings": [{
    "group": "complexity",
    "smells": [{
      "name": "TooManyFunctions",
      "description": "Too many functions inside a/an file/class/object/interface always indicate a violation of the single responsibility principle. Maybe the file/class/object/interface wants to manage to many things at once. Extract functionality which clearly belongs together.",
      "instances": [{
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/subsonic-api/src/main/kotlin/org/moire/ultrasonic/api/subsonic/ApiVersionCheckWrapper.kt:41:1",
        "message": "Class 'ApiVersionCheckWrapper' with '37' functions detected. Defined threshold inside classes is set to '11'"
      }]
    }, {
      "name": "StringLiteralDuplication",
      "description": "Multiple occurrences of the same string literal within a single file detected.",
      "instances": [{
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/subsonic-api/src/main/kotlin/org/moire/ultrasonic/api/subsonic/interceptors/RangeHeaderInterceptor.kt:23:45",
        "message": "Multiple occurrences of the same string literal within a single file detected."
      }]
    }, {
      "name": "NestedBlockDepth",
      "description": "Excessive nesting leads to hidden complexity. Prefer extracting code to make it easier to understand.",
      "instances": [{
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/subsonic-api/src/main/kotlin/org/moire/ultrasonic/api/subsonic/interceptors/VersionInterceptor.kt:50:5",
        "message": "Function tryUpdateProtocolVersion is nested too deeply."
      }]
    }, {
      "name": "ComplexMethod",
      "description": "Prefer splitting up complex methods into smaller, easier to understand methods.",
      "instances": [{
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/subsonic-api/src/main/kotlin/org/moire/ultrasonic/api/subsonic/SubsonicError.kt:26:9",
        "message": "The function getError appears to be too complex."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/subsonic-api/src/main/kotlin/org/moire/ultrasonic/api/subsonic/SubsonicAPIVersions.kt:33:9",
        "message": "The function fromApiVersion appears to be too complex."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/subsonic-api/src/main/kotlin/org/moire/ultrasonic/api/subsonic/models/AlbumListType.kt:26:9",
        "message": "The function fromName appears to be too complex."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/ultrasonic/src/main/kotlin/pt/ipleiria/mymusicqoe/subsonic/RestErrorMapper.kt:17:1",
        "message": "The function getLocalizedErrorMessage appears to be too complex."
      }]
    }, {
      "name": "ComplexInterface",
      "description": "An interface contains too many functions and properties. Large classes tend to handle many things at once. An interface should have one responsibility. Split up large interfaces into smaller ones that are easier to understand.",
      "instances": [{
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/subsonic-api/src/main/kotlin/org/moire/ultrasonic/api/subsonic/SubsonicAPIDefinition.kt:13:1",
        "message": "The interface SubsonicAPIDefinition is too complex. Consider splitting it up."
      }]
    }, {
      "name": "LabeledExpression",
      "description": "Expression with labels increase complexity and affect maintainability.",
      "instances": [{
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/ultrasonic/src/main/kotlin/pt/ipleiria/mymusicqoe/domain/APIAlbumConverter.kt:10:14",
        "message": "Expression with labels increase complexity and affect maintainability."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/ultrasonic/src/main/kotlin/pt/ipleiria/mymusicqoe/domain/APIAlbumConverter.kt:12:17",
        "message": "Expression with labels increase complexity and affect maintainability."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/ultrasonic/src/main/kotlin/pt/ipleiria/mymusicqoe/domain/APIAlbumConverter.kt:13:20",
        "message": "Expression with labels increase complexity and affect maintainability."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/ultrasonic/src/main/kotlin/pt/ipleiria/mymusicqoe/domain/APIAlbumConverter.kt:14:18",
        "message": "Expression with labels increase complexity and affect maintainability."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/ultrasonic/src/main/kotlin/pt/ipleiria/mymusicqoe/domain/APIAlbumConverter.kt:15:20",
        "message": "Expression with labels increase complexity and affect maintainability."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/ultrasonic/src/main/kotlin/pt/ipleiria/mymusicqoe/domain/APIAlbumConverter.kt:16:21",
        "message": "Expression with labels increase complexity and affect maintainability."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/ultrasonic/src/main/kotlin/pt/ipleiria/mymusicqoe/domain/APIAlbumConverter.kt:17:20",
        "message": "Expression with labels increase complexity and affect maintainability."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/ultrasonic/src/main/kotlin/pt/ipleiria/mymusicqoe/domain/APIAlbumConverter.kt:18:19",
        "message": "Expression with labels increase complexity and affect maintainability."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/ultrasonic/src/main/kotlin/pt/ipleiria/mymusicqoe/domain/APIAlbumConverter.kt:19:16",
        "message": "Expression with labels increase complexity and affect maintainability."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/ultrasonic/src/main/kotlin/pt/ipleiria/mymusicqoe/domain/APIAlbumConverter.kt:20:17",
        "message": "Expression with labels increase complexity and affect maintainability."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/ultrasonic/src/main/kotlin/pt/ipleiria/mymusicqoe/domain/APIAlbumConverter.kt:24:12",
        "message": "Expression with labels increase complexity and affect maintainability."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/ultrasonic/src/main/kotlin/pt/ipleiria/mymusicqoe/domain/APIArtistConverter.kt:11:14",
        "message": "Expression with labels increase complexity and affect maintainability."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/ultrasonic/src/main/kotlin/pt/ipleiria/mymusicqoe/domain/APIArtistConverter.kt:12:16",
        "message": "Expression with labels increase complexity and affect maintainability."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/ultrasonic/src/main/kotlin/pt/ipleiria/mymusicqoe/domain/APIArtistConverter.kt:16:12",
        "message": "Expression with labels increase complexity and affect maintainability."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/ultrasonic/src/main/kotlin/pt/ipleiria/mymusicqoe/domain/APIArtistConverter.kt:17:12",
        "message": "Expression with labels increase complexity and affect maintainability."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/ultrasonic/src/main/kotlin/pt/ipleiria/mymusicqoe/domain/APIBookmarkConverter.kt:9:20",
        "message": "Expression with labels increase complexity and affect maintainability."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/ultrasonic/src/main/kotlin/pt/ipleiria/mymusicqoe/domain/APIBookmarkConverter.kt:10:20",
        "message": "Expression with labels increase complexity and affect maintainability."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/ultrasonic/src/main/kotlin/pt/ipleiria/mymusicqoe/domain/APIBookmarkConverter.kt:11:19",
        "message": "Expression with labels increase complexity and affect maintainability."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/ultrasonic/src/main/kotlin/pt/ipleiria/mymusicqoe/domain/APIBookmarkConverter.kt:12:19",
        "message": "Expression with labels increase complexity and affect maintainability."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/ultrasonic/src/main/kotlin/pt/ipleiria/mymusicqoe/domain/APIBookmarkConverter.kt:13:19",
        "message": "Expression with labels increase complexity and affect maintainability."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/ultrasonic/src/main/kotlin/pt/ipleiria/mymusicqoe/domain/APIBookmarkConverter.kt:14:17",
        "message": "Expression with labels increase complexity and affect maintainability."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/ultrasonic/src/main/kotlin/pt/ipleiria/mymusicqoe/domain/APIGenreConverter.kt:9:16",
        "message": "Expression with labels increase complexity and affect maintainability."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/ultrasonic/src/main/kotlin/pt/ipleiria/mymusicqoe/domain/APIGenreConverter.kt:10:17",
        "message": "Expression with labels increase complexity and affect maintainability."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/ultrasonic/src/main/kotlin/pt/ipleiria/mymusicqoe/domain/APIJukeboxCoverter.kt:9:27",
        "message": "Expression with labels increase complexity and affect maintainability."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/ultrasonic/src/main/kotlin/pt/ipleiria/mymusicqoe/domain/APIJukeboxCoverter.kt:10:31",
        "message": "Expression with labels increase complexity and affect maintainability."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/ultrasonic/src/main/kotlin/pt/ipleiria/mymusicqoe/domain/APIJukeboxCoverter.kt:11:21",
        "message": "Expression with labels increase complexity and affect maintainability."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/ultrasonic/src/main/kotlin/pt/ipleiria/mymusicqoe/domain/APIJukeboxCoverter.kt:12:16",
        "message": "Expression with labels increase complexity and affect maintainability."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/ultrasonic/src/main/kotlin/pt/ipleiria/mymusicqoe/domain/APILyricsConverter.kt:10:18",
        "message": "Expression with labels increase complexity and affect maintainability."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/ultrasonic/src/main/kotlin/pt/ipleiria/mymusicqoe/domain/APILyricsConverter.kt:11:17",
        "message": "Expression with labels increase complexity and affect maintainability."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/ultrasonic/src/main/kotlin/pt/ipleiria/mymusicqoe/domain/APILyricsConverter.kt:12:16",
        "message": "Expression with labels increase complexity and affect maintainability."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/ultrasonic/src/main/kotlin/pt/ipleiria/mymusicqoe/domain/APIUserConverter.kt:9:21",
        "message": "Expression with labels increase complexity and affect maintainability."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/ultrasonic/src/main/kotlin/pt/ipleiria/mymusicqoe/domain/APIUserConverter.kt:10:23",
        "message": "Expression with labels increase complexity and affect maintainability."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/ultrasonic/src/main/kotlin/pt/ipleiria/mymusicqoe/domain/APIUserConverter.kt:11:24",
        "message": "Expression with labels increase complexity and affect maintainability."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/ultrasonic/src/main/kotlin/pt/ipleiria/mymusicqoe/domain/APIUserConverter.kt:12:24",
        "message": "Expression with labels increase complexity and affect maintainability."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/ultrasonic/src/main/kotlin/pt/ipleiria/mymusicqoe/domain/APIUserConverter.kt:13:17",
        "message": "Expression with labels increase complexity and affect maintainability."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/ultrasonic/src/main/kotlin/pt/ipleiria/mymusicqoe/domain/APIUserConverter.kt:14:23",
        "message": "Expression with labels increase complexity and affect maintainability."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/ultrasonic/src/main/kotlin/pt/ipleiria/mymusicqoe/domain/APIUserConverter.kt:15:24",
        "message": "Expression with labels increase complexity and affect maintainability."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/ultrasonic/src/main/kotlin/pt/ipleiria/mymusicqoe/domain/APIUserConverter.kt:16:23",
        "message": "Expression with labels increase complexity and affect maintainability."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/ultrasonic/src/main/kotlin/pt/ipleiria/mymusicqoe/domain/APIUserConverter.kt:17:29",
        "message": "Expression with labels increase complexity and affect maintainability."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/ultrasonic/src/main/kotlin/pt/ipleiria/mymusicqoe/domain/APIUserConverter.kt:18:24",
        "message": "Expression with labels increase complexity and affect maintainability."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/ultrasonic/src/main/kotlin/pt/ipleiria/mymusicqoe/domain/APIUserConverter.kt:19:21",
        "message": "Expression with labels increase complexity and affect maintainability."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/ultrasonic/src/main/kotlin/pt/ipleiria/mymusicqoe/domain/APIUserConverter.kt:20:22",
        "message": "Expression with labels increase complexity and affect maintainability."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/ultrasonic/src/main/kotlin/pt/ipleiria/mymusicqoe/domain/APIUserConverter.kt:21:22",
        "message": "Expression with labels increase complexity and affect maintainability."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/ultrasonic/src/main/kotlin/pt/ipleiria/mymusicqoe/domain/APIUserConverter.kt:22:20",
        "message": "Expression with labels increase complexity and affect maintainability."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/ultrasonic/src/main/kotlin/pt/ipleiria/mymusicqoe/domain/APIPlaylistConverter.kt:15:12",
        "message": "Expression with labels increase complexity and affect maintainability."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/ultrasonic/src/main/kotlin/pt/ipleiria/mymusicqoe/domain/APIPlaylistConverter.kt:16:12",
        "message": "Expression with labels increase complexity and affect maintainability."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/ultrasonic/src/main/kotlin/pt/ipleiria/mymusicqoe/domain/APIChatMessageConverter.kt:9:20",
        "message": "Expression with labels increase complexity and affect maintainability."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/ultrasonic/src/main/kotlin/pt/ipleiria/mymusicqoe/domain/APIChatMessageConverter.kt:10:16",
        "message": "Expression with labels increase complexity and affect maintainability."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/ultrasonic/src/main/kotlin/pt/ipleiria/mymusicqoe/domain/APIChatMessageConverter.kt:11:19",
        "message": "Expression with labels increase complexity and affect maintainability."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/ultrasonic/src/main/kotlin/pt/ipleiria/mymusicqoe/domain/APIShareConverter.kt:17:19",
        "message": "Expression with labels increase complexity and affect maintainability."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/ultrasonic/src/main/kotlin/pt/ipleiria/mymusicqoe/domain/APIShareConverter.kt:18:23",
        "message": "Expression with labels increase complexity and affect maintainability."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/ultrasonic/src/main/kotlin/pt/ipleiria/mymusicqoe/domain/APIShareConverter.kt:19:19",
        "message": "Expression with labels increase complexity and affect maintainability."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/ultrasonic/src/main/kotlin/pt/ipleiria/mymusicqoe/domain/APIShareConverter.kt:20:14",
        "message": "Expression with labels increase complexity and affect maintainability."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/ultrasonic/src/main/kotlin/pt/ipleiria/mymusicqoe/domain/APIShareConverter.kt:21:23",
        "message": "Expression with labels increase complexity and affect maintainability."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/ultrasonic/src/main/kotlin/pt/ipleiria/mymusicqoe/domain/APIShareConverter.kt:22:15",
        "message": "Expression with labels increase complexity and affect maintainability."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/ultrasonic/src/main/kotlin/pt/ipleiria/mymusicqoe/domain/APIShareConverter.kt:23:20",
        "message": "Expression with labels increase complexity and affect maintainability."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/ultrasonic/src/main/kotlin/pt/ipleiria/mymusicqoe/domain/APIShareConverter.kt:24:22",
        "message": "Expression with labels increase complexity and affect maintainability."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/ultrasonic/src/main/kotlin/pt/ipleiria/mymusicqoe/domain/APIShareConverter.kt:25:19",
        "message": "Expression with labels increase complexity and affect maintainability."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/ultrasonic/src/main/kotlin/pt/ipleiria/mymusicqoe/domain/APIMusicDirectoryConverter.kt:18:10",
        "message": "Expression with labels increase complexity and affect maintainability."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/ultrasonic/src/main/kotlin/pt/ipleiria/mymusicqoe/domain/APIMusicDirectoryConverter.kt:19:14",
        "message": "Expression with labels increase complexity and affect maintainability."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/ultrasonic/src/main/kotlin/pt/ipleiria/mymusicqoe/domain/APIMusicDirectoryConverter.kt:20:19",
        "message": "Expression with labels increase complexity and affect maintainability."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/ultrasonic/src/main/kotlin/pt/ipleiria/mymusicqoe/domain/APIMusicDirectoryConverter.kt:21:13",
        "message": "Expression with labels increase complexity and affect maintainability."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/ultrasonic/src/main/kotlin/pt/ipleiria/mymusicqoe/domain/APIMusicDirectoryConverter.kt:22:13",
        "message": "Expression with labels increase complexity and affect maintainability."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/ultrasonic/src/main/kotlin/pt/ipleiria/mymusicqoe/domain/APIMusicDirectoryConverter.kt:23:15",
        "message": "Expression with labels increase complexity and affect maintainability."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/ultrasonic/src/main/kotlin/pt/ipleiria/mymusicqoe/domain/APIMusicDirectoryConverter.kt:24:14",
        "message": "Expression with labels increase complexity and affect maintainability."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/ultrasonic/src/main/kotlin/pt/ipleiria/mymusicqoe/domain/APIMusicDirectoryConverter.kt:25:16",
        "message": "Expression with labels increase complexity and affect maintainability."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/ultrasonic/src/main/kotlin/pt/ipleiria/mymusicqoe/domain/APIMusicDirectoryConverter.kt:26:13",
        "message": "Expression with labels increase complexity and affect maintainability."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/ultrasonic/src/main/kotlin/pt/ipleiria/mymusicqoe/domain/APIMusicDirectoryConverter.kt:27:12",
        "message": "Expression with labels increase complexity and affect maintainability."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/ultrasonic/src/main/kotlin/pt/ipleiria/mymusicqoe/domain/APIMusicDirectoryConverter.kt:28:13",
        "message": "Expression with labels increase complexity and affect maintainability."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/ultrasonic/src/main/kotlin/pt/ipleiria/mymusicqoe/domain/APIMusicDirectoryConverter.kt:29:19",
        "message": "Expression with labels increase complexity and affect maintainability."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/ultrasonic/src/main/kotlin/pt/ipleiria/mymusicqoe/domain/APIMusicDirectoryConverter.kt:30:14",
        "message": "Expression with labels increase complexity and affect maintainability."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/ultrasonic/src/main/kotlin/pt/ipleiria/mymusicqoe/domain/APIMusicDirectoryConverter.kt:31:29",
        "message": "Expression with labels increase complexity and affect maintainability."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/ultrasonic/src/main/kotlin/pt/ipleiria/mymusicqoe/domain/APIMusicDirectoryConverter.kt:32:24",
        "message": "Expression with labels increase complexity and affect maintainability."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/ultrasonic/src/main/kotlin/pt/ipleiria/mymusicqoe/domain/APIMusicDirectoryConverter.kt:33:30",
        "message": "Expression with labels increase complexity and affect maintainability."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/ultrasonic/src/main/kotlin/pt/ipleiria/mymusicqoe/domain/APIMusicDirectoryConverter.kt:34:21",
        "message": "Expression with labels increase complexity and affect maintainability."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/ultrasonic/src/main/kotlin/pt/ipleiria/mymusicqoe/domain/APIMusicDirectoryConverter.kt:35:16",
        "message": "Expression with labels increase complexity and affect maintainability."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/ultrasonic/src/main/kotlin/pt/ipleiria/mymusicqoe/domain/APIMusicDirectoryConverter.kt:36:12",
        "message": "Expression with labels increase complexity and affect maintainability."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/ultrasonic/src/main/kotlin/pt/ipleiria/mymusicqoe/domain/APIMusicDirectoryConverter.kt:37:16",
        "message": "Expression with labels increase complexity and affect maintainability."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/ultrasonic/src/main/kotlin/pt/ipleiria/mymusicqoe/domain/APIMusicDirectoryConverter.kt:38:15",
        "message": "Expression with labels increase complexity and affect maintainability."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/ultrasonic/src/main/kotlin/pt/ipleiria/mymusicqoe/domain/APIMusicDirectoryConverter.kt:39:12",
        "message": "Expression with labels increase complexity and affect maintainability."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/ultrasonic/src/main/kotlin/pt/ipleiria/mymusicqoe/domain/APIMusicDirectoryConverter.kt:40:15",
        "message": "Expression with labels increase complexity and affect maintainability."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/ultrasonic/src/main/kotlin/pt/ipleiria/mymusicqoe/domain/APIMusicDirectoryConverter.kt:41:15",
        "message": "Expression with labels increase complexity and affect maintainability."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/ultrasonic/src/main/kotlin/pt/ipleiria/mymusicqoe/domain/APIMusicDirectoryConverter.kt:42:15",
        "message": "Expression with labels increase complexity and affect maintainability."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/ultrasonic/src/main/kotlin/pt/ipleiria/mymusicqoe/domain/APIMusicDirectoryConverter.kt:43:18",
        "message": "Expression with labels increase complexity and affect maintainability."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/ultrasonic/src/main/kotlin/pt/ipleiria/mymusicqoe/domain/APIMusicDirectoryConverter.kt:44:12",
        "message": "Expression with labels increase complexity and affect maintainability."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/ultrasonic/src/main/kotlin/pt/ipleiria/mymusicqoe/domain/APIMusicDirectoryConverter.kt:45:9",
        "message": "Expression with labels increase complexity and affect maintainability."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/ultrasonic/src/main/kotlin/pt/ipleiria/mymusicqoe/domain/APIMusicDirectoryConverter.kt:46:14",
        "message": "Expression with labels increase complexity and affect maintainability."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/ultrasonic/src/main/kotlin/pt/ipleiria/mymusicqoe/domain/APIMusicDirectoryConverter.kt:48:9",
        "message": "Expression with labels increase complexity and affect maintainability."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/ultrasonic/src/main/kotlin/pt/ipleiria/mymusicqoe/domain/APIMusicDirectoryConverter.kt:49:36",
        "message": "Expression with labels increase complexity and affect maintainability."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/ultrasonic/src/main/kotlin/pt/ipleiria/mymusicqoe/domain/APIMusicDirectoryConverter.kt:56:12",
        "message": "Expression with labels increase complexity and affect maintainability."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/ultrasonic/src/main/kotlin/pt/ipleiria/mymusicqoe/domain/APIMusicDirectoryConverter.kt:57:12",
        "message": "Expression with labels increase complexity and affect maintainability."
      }]
    }]
  }, {
    "group": "naming",
    "smells": [{
      "name": "FunctionParameterNaming",
      "description": "Function parameter names should follow the naming convention set in the projects configuration.",
      "instances": [{
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/subsonic-api/src/main/kotlin/org/moire/ultrasonic/api/subsonic/SubsonicAPIDefinition.kt:284:13",
        "message": "Function parameter names should match the pattern: [a-z][A-Za-z0-9]*"
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/subsonic-api/src/main/kotlin/org/moire/ultrasonic/api/subsonic/SubsonicAPIDefinition.kt:294:13",
        "message": "Function parameter names should match the pattern: [a-z][A-Za-z0-9]*"
      }]
    }]
  }, {
    "group": "potential-bugs",
    "smells": [{
      "name": "UnsafeCallOnNullableType",
      "description": "It will throw a NullPointerException at runtime if your nullable value is null.",
      "instances": [{
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/subsonic-api/src/integrationTest/kotlin/org/moire/ultrasonic/api/subsonic/SubsonicApiGetVideosListTest.kt:28:14",
        "message": "Calling !! on a nullable type will throw a NullPointerException at runtime in case the value is null. It should be avoided."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/subsonic-api/src/integrationTest/kotlin/org/moire/ultrasonic/api/subsonic/SubsonicApiPingRequestTest.kt:16:14",
        "message": "Calling !! on a nullable type will throw a NullPointerException at runtime in case the value is null. It should be avoided."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/subsonic-api/src/integrationTest/kotlin/org/moire/ultrasonic/api/subsonic/SubsonicApiGetChatMessagesTest.kt:28:14",
        "message": "Calling !! on a nullable type will throw a NullPointerException at runtime in case the value is null. It should be avoided."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/subsonic-api/src/integrationTest/kotlin/org/moire/ultrasonic/api/subsonic/SubsonicApiGetPodcastsTest.kt:30:35",
        "message": "Calling !! on a nullable type will throw a NullPointerException at runtime in case the value is null. It should be avoided."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/subsonic-api/src/integrationTest/kotlin/org/moire/ultrasonic/api/subsonic/interceptors/RangeHeaderInterceptorTest.kt:30:9",
        "message": "Calling !! on a nullable type will throw a NullPointerException at runtime in case the value is null. It should be avoided."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/subsonic-api/src/integrationTest/kotlin/org/moire/ultrasonic/api/subsonic/interceptors/RangeHeaderInterceptorTest.kt:57:9",
        "message": "Calling !! on a nullable type will throw a NullPointerException at runtime in case the value is null. It should be avoided."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/subsonic-api/src/integrationTest/kotlin/org/moire/ultrasonic/api/subsonic/SubsonicApiGetAlbumList2Test.kt:31:14",
        "message": "Calling !! on a nullable type will throw a NullPointerException at runtime in case the value is null. It should be avoided."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/subsonic-api/src/integrationTest/kotlin/org/moire/ultrasonic/api/subsonic/SubsonicApiGetStarred2Test.kt:30:14",
        "message": "Calling !! on a nullable type will throw a NullPointerException at runtime in case the value is null. It should be avoided."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/subsonic-api/src/integrationTest/kotlin/org/moire/ultrasonic/api/subsonic/SubsonicApiGetBookmarksTest.kt:28:9",
        "message": "Calling !! on a nullable type will throw a NullPointerException at runtime in case the value is null. It should be avoided."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/subsonic-api/src/integrationTest/kotlin/org/moire/ultrasonic/api/subsonic/SubsonicApiGetBookmarksTest.kt:29:14",
        "message": "Calling !! on a nullable type will throw a NullPointerException at runtime in case the value is null. It should be avoided."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/subsonic-api/src/integrationTest/kotlin/org/moire/ultrasonic/api/subsonic/SubsonicApiGetSharesTest.kt:28:9",
        "message": "Calling !! on a nullable type will throw a NullPointerException at runtime in case the value is null. It should be avoided."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/subsonic-api/src/integrationTest/kotlin/org/moire/ultrasonic/api/subsonic/SubsonicApiGetSharesTest.kt:29:14",
        "message": "Calling !! on a nullable type will throw a NullPointerException at runtime in case the value is null. It should be avoided."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/subsonic-api/src/integrationTest/kotlin/org/moire/ultrasonic/api/subsonic/SubsonicApiGetLyricsTest.kt:24:14",
        "message": "Calling !! on a nullable type will throw a NullPointerException at runtime in case the value is null. It should be avoided."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/subsonic-api/src/integrationTest/kotlin/org/moire/ultrasonic/api/subsonic/CommonFunctions.kt:69:10",
        "message": "Calling !! on a nullable type will throw a NullPointerException at runtime in case the value is null. It should be avoided."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/subsonic-api/src/integrationTest/kotlin/org/moire/ultrasonic/api/subsonic/CommonFunctions.kt:73:12",
        "message": "Calling !! on a nullable type will throw a NullPointerException at runtime in case the value is null. It should be avoided."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/subsonic-api/src/integrationTest/kotlin/org/moire/ultrasonic/api/subsonic/SubsonicApiGetMusicDirectoryTest.kt:43:9",
        "message": "Calling !! on a nullable type will throw a NullPointerException at runtime in case the value is null. It should be avoided."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/subsonic-api/src/integrationTest/kotlin/org/moire/ultrasonic/api/subsonic/SubsonicApiGetMusicDirectoryTest.kt:44:14",
        "message": "Calling !! on a nullable type will throw a NullPointerException at runtime in case the value is null. It should be avoided."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/subsonic-api/src/integrationTest/kotlin/org/moire/ultrasonic/api/subsonic/SubsonicApiGetGenresTest.kt:28:14",
        "message": "Calling !! on a nullable type will throw a NullPointerException at runtime in case the value is null. It should be avoided."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/subsonic-api/src/integrationTest/kotlin/org/moire/ultrasonic/api/subsonic/SubsonicApiGetSongsByGenreTest.kt:28:9",
        "message": "Calling !! on a nullable type will throw a NullPointerException at runtime in case the value is null. It should be avoided."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/subsonic-api/src/integrationTest/kotlin/org/moire/ultrasonic/api/subsonic/SubsonicApiGetSongsByGenreTest.kt:29:14",
        "message": "Calling !! on a nullable type will throw a NullPointerException at runtime in case the value is null. It should be avoided."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/subsonic-api/src/integrationTest/kotlin/org/moire/ultrasonic/api/subsonic/SubsonicApiGetArtistTest.kt:41:14",
        "message": "Calling !! on a nullable type will throw a NullPointerException at runtime in case the value is null. It should be avoided."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/subsonic-api/src/integrationTest/kotlin/org/moire/ultrasonic/api/subsonic/SubsonicApiGetAlbumListRequestTest.kt:30:14",
        "message": "Calling !! on a nullable type will throw a NullPointerException at runtime in case the value is null. It should be avoided."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/subsonic-api/src/integrationTest/kotlin/org/moire/ultrasonic/api/subsonic/SubsonicApiGetIndexesTest.kt:21:9",
        "message": "Calling !! on a nullable type will throw a NullPointerException at runtime in case the value is null. It should be avoided."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/subsonic-api/src/integrationTest/kotlin/org/moire/ultrasonic/api/subsonic/SubsonicApiGetIndexesTest.kt:22:14",
        "message": "Calling !! on a nullable type will throw a NullPointerException at runtime in case the value is null. It should be avoided."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/subsonic-api/src/integrationTest/kotlin/org/moire/ultrasonic/api/subsonic/SubsonicApiGetCoverArtTest.kt:53:13",
        "message": "Calling !! on a nullable type will throw a NullPointerException at runtime in case the value is null. It should be avoided."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/subsonic-api/src/integrationTest/kotlin/org/moire/ultrasonic/api/subsonic/SubsonicApiCreateShareTest.kt:29:9",
        "message": "Calling !! on a nullable type will throw a NullPointerException at runtime in case the value is null. It should be avoided."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/subsonic-api/src/integrationTest/kotlin/org/moire/ultrasonic/api/subsonic/SubsonicApiCreateShareTest.kt:30:14",
        "message": "Calling !! on a nullable type will throw a NullPointerException at runtime in case the value is null. It should be avoided."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/subsonic-api/src/integrationTest/kotlin/org/moire/ultrasonic/api/subsonic/SubsonicApiSearchTest.kt:32:14",
        "message": "Calling !! on a nullable type will throw a NullPointerException at runtime in case the value is null. It should be avoided."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/subsonic-api/src/integrationTest/kotlin/org/moire/ultrasonic/api/subsonic/SubsonicApiGetMusicFoldersTest.kt:18:14",
        "message": "Calling !! on a nullable type will throw a NullPointerException at runtime in case the value is null. It should be avoided."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/subsonic-api/src/integrationTest/kotlin/org/moire/ultrasonic/api/subsonic/SubsonicApiSearchThreeTest.kt:33:14",
        "message": "Calling !! on a nullable type will throw a NullPointerException at runtime in case the value is null. It should be avoided."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/subsonic-api/src/integrationTest/kotlin/org/moire/ultrasonic/api/subsonic/SubsonicApiGetStarredTest.kt:29:14",
        "message": "Calling !! on a nullable type will throw a NullPointerException at runtime in case the value is null. It should be avoided."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/subsonic-api/src/integrationTest/kotlin/org/moire/ultrasonic/api/subsonic/SubsonicApiGetAvatarTest.kt:53:13",
        "message": "Calling !! on a nullable type will throw a NullPointerException at runtime in case the value is null. It should be avoided."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/subsonic-api/src/integrationTest/kotlin/org/moire/ultrasonic/api/subsonic/SubsonicApiGetPlaylistsTest.kt:30:14",
        "message": "Calling !! on a nullable type will throw a NullPointerException at runtime in case the value is null. It should be avoided."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/subsonic-api/src/integrationTest/kotlin/org/moire/ultrasonic/api/subsonic/SubsonicApiGetAlbumTest.kt:41:14",
        "message": "Calling !! on a nullable type will throw a NullPointerException at runtime in case the value is null. It should be avoided."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/subsonic-api/src/integrationTest/kotlin/org/moire/ultrasonic/api/subsonic/SubsonicApiGetRandomSongsTest.kt:28:14",
        "message": "Calling !! on a nullable type will throw a NullPointerException at runtime in case the value is null. It should be avoided."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/subsonic-api/src/integrationTest/kotlin/org/moire/ultrasonic/api/subsonic/SubsonicApiGetPlaylistTest.kt:31:14",
        "message": "Calling !! on a nullable type will throw a NullPointerException at runtime in case the value is null. It should be avoided."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/subsonic-api/src/integrationTest/kotlin/org/moire/ultrasonic/api/subsonic/SubsonicApiJukeboxControlTest.kt:32:14",
        "message": "Calling !! on a nullable type will throw a NullPointerException at runtime in case the value is null. It should be avoided."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/subsonic-api/src/integrationTest/kotlin/org/moire/ultrasonic/api/subsonic/SubsonicApiJukeboxControlTest.kt:48:14",
        "message": "Calling !! on a nullable type will throw a NullPointerException at runtime in case the value is null. It should be avoided."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/subsonic-api/src/integrationTest/kotlin/org/moire/ultrasonic/api/subsonic/SubsonicApiSearchTwoTest.kt:32:14",
        "message": "Calling !! on a nullable type will throw a NullPointerException at runtime in case the value is null. It should be avoided."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/subsonic-api/src/integrationTest/kotlin/org/moire/ultrasonic/api/subsonic/SubsonicApiErrorsTest.kt:153:18",
        "message": "Calling !! on a nullable type will throw a NullPointerException at runtime in case the value is null. It should be avoided."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/subsonic-api/src/integrationTest/kotlin/org/moire/ultrasonic/api/subsonic/SubsonicApiGetUserTest.kt:28:14",
        "message": "Calling !! on a nullable type will throw a NullPointerException at runtime in case the value is null. It should be avoided."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/subsonic-api/src/integrationTest/kotlin/org/moire/ultrasonic/api/subsonic/SubsonicApiStreamTest.kt:53:13",
        "message": "Calling !! on a nullable type will throw a NullPointerException at runtime in case the value is null. It should be avoided."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/subsonic-api/src/integrationTest/kotlin/org/moire/ultrasonic/api/subsonic/SubsonicApiGetLicenseTest.kt:19:14",
        "message": "Calling !! on a nullable type will throw a NullPointerException at runtime in case the value is null. It should be avoided."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/subsonic-api/src/integrationTest/kotlin/org/moire/ultrasonic/api/subsonic/SubsonicApiGetArtistsTest.kt:32:14",
        "message": "Calling !! on a nullable type will throw a NullPointerException at runtime in case the value is null. It should be avoided."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/ultrasonic/src/test/kotlin/org/moire/ultrasonic/domain/APIMusicDirectoryConverterTest.kt:58:33",
        "message": "Calling !! on a nullable type will throw a NullPointerException at runtime in case the value is null. It should be avoided."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/ultrasonic/src/main/kotlin/pt/ipleiria/mymusicqoe/domain/APIMusicDirectoryConverter.kt:49:36",
        "message": "Calling !! on a nullable type will throw a NullPointerException at runtime in case the value is null. It should be avoided."
      }]
    }, {
      "name": "UnsafeCast",
      "description": "Cast operator throws an exception if the cast is not possible.",
      "instances": [{
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/subsonic-api/src/integrationTest/kotlin/org/moire/ultrasonic/api/subsonic/interceptors/VersionInterceptorTest.kt:43:10",
        "message": "interceptor cannot be safely cast to VersionInterceptor."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/subsonic-api/src/integrationTest/kotlin/org/moire/ultrasonic/api/subsonic/interceptors/VersionInterceptorTest.kt:53:10",
        "message": "interceptor cannot be safely cast to VersionInterceptor."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/subsonic-api/src/integrationTest/kotlin/org/moire/ultrasonic/api/subsonic/interceptors/VersionInterceptorTest.kt:64:10",
        "message": "interceptor cannot be safely cast to VersionInterceptor."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/subsonic-api/src/integrationTest/kotlin/org/moire/ultrasonic/api/subsonic/SubsonicApiSSLTest.kt:50:20",
        "message": "(CertificateFactory.getInstance(\"X.509\")\n                    .generateCertificate(certificatePemStream)) cannot be safely cast to X509Certificate."
      }]
    }]
  }, {
    "group": "style",
    "smells": [{
      "name": "UnnecessaryAbstractClass",
      "description": "An abstract class is unnecessary and can be refactored. An abstract class should have both abstract and concrete properties or functions. An abstract class without a concrete member can be refactored to an interface. An abstract class without an abstract member can be refactored to a concrete class.",
      "instances": [{
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/cache/src/test/kotlin/org/moire/ultrasonic/cache/BaseStorageTest.kt:15:1",
        "message": "An abstract class without an abstract member can be refactored to a concrete class."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/subsonic-api/src/integrationTest/kotlin/org/moire/ultrasonic/api/subsonic/SubsonicAPIClientTest.kt:7:1",
        "message": "An abstract class without an abstract member can be refactored to a concrete class."
      }]
    }, {
      "name": "ReturnCount",
      "description": "Restrict the number of return statements in methods.",
      "instances": [{
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/cache/src/main/kotlin/org/moire/ultrasonic/cache/serializers/IndexesSerializer.kt:28:5",
        "message": "Function deserializeObject has 5 return statements which exceeds the limit of 2."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/cache/src/main/kotlin/org/moire/ultrasonic/cache/serializers/MusicFolderSerializer.kt:25:5",
        "message": "Function deserializeObject has 4 return statements which exceeds the limit of 2."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/subsonic-api/src/main/kotlin/org/moire/ultrasonic/api/subsonic/SubsonicAPIVersions.kt:33:9",
        "message": "Function fromApiVersion has 18 return statements which exceeds the limit of 2."
      }]
    }, {
      "name": "UnnecessaryParentheses",
      "description": "Unnecessary parentheses don't add any value to the code and should be removed.",
      "instances": [{
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/subsonic-api/src/integrationTest/kotlin/org/moire/ultrasonic/api/subsonic/SubsonicApiSSLTest.kt:50:20",
        "message": "Parentheses in (CertificateFactory.getInstance(\"X.509\")\n                    .generateCertificate(certificatePemStream)) are unnecessary and can be replaced with: CertificateFactory.getInstance(\"X.509\")\n                    .generateCertificate(certificatePemStream)"
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/ultrasonic/src/test/kotlin/org/moire/ultrasonic/domain/APIBookmarkConverterTest.kt:42:42",
        "message": "Parentheses around the lambda ({ index, bookmark ->\n            bookmark `should equal` entitiesList[index].toDomainEntity()\n        }) are unnecessary and can be removed."
      }]
    }, {
      "name": "MagicNumber",
      "description": "Report magic numbers. Magic number is a numeric literal that is not defined as a constant and hence it's unclear what the purpose of this number is. It's better to declare such numbers as constants and give them a proper name. By default, -1, 0, 1, and 2 are not considered to be magic numbers.",
      "instances": [{
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/subsonic-api/src/main/kotlin/org/moire/ultrasonic/api/subsonic/interceptors/PasswordMD5Interceptor.kt:20:20",
        "message": "This expression contains a magic number. Consider defining it to a well named constant."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/subsonic-api/src/main/kotlin/org/moire/ultrasonic/api/subsonic/interceptors/PasswordMD5Interceptor.kt:20:48",
        "message": "This expression contains a magic number. Consider defining it to a well named constant."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/subsonic-api/src/main/kotlin/org/moire/ultrasonic/api/subsonic/interceptors/PasswordExt.kt:17:37",
        "message": "This expression contains a magic number. Consider defining it to a well named constant."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/subsonic-api/src/main/kotlin/org/moire/ultrasonic/api/subsonic/interceptors/PasswordExt.kt:18:48",
        "message": "This expression contains a magic number. Consider defining it to a well named constant."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/subsonic-api/src/main/kotlin/org/moire/ultrasonic/api/subsonic/SubsonicError.kt:16:49",
        "message": "This expression contains a magic number. Consider defining it to a well named constant."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/subsonic-api/src/main/kotlin/org/moire/ultrasonic/api/subsonic/SubsonicError.kt:17:62",
        "message": "This expression contains a magic number. Consider defining it to a well named constant."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/subsonic-api/src/main/kotlin/org/moire/ultrasonic/api/subsonic/SubsonicError.kt:18:62",
        "message": "This expression contains a magic number. Consider defining it to a well named constant."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/subsonic-api/src/main/kotlin/org/moire/ultrasonic/api/subsonic/SubsonicError.kt:19:52",
        "message": "This expression contains a magic number. Consider defining it to a well named constant."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/subsonic-api/src/main/kotlin/org/moire/ultrasonic/api/subsonic/SubsonicError.kt:20:57",
        "message": "This expression contains a magic number. Consider defining it to a well named constant."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/subsonic-api/src/main/kotlin/org/moire/ultrasonic/api/subsonic/SubsonicError.kt:21:58",
        "message": "This expression contains a magic number. Consider defining it to a well named constant."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/subsonic-api/src/main/kotlin/org/moire/ultrasonic/api/subsonic/SubsonicError.kt:22:46",
        "message": "This expression contains a magic number. Consider defining it to a well named constant."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/subsonic-api/src/main/kotlin/org/moire/ultrasonic/api/subsonic/SubsonicError.kt:23:53",
        "message": "This expression contains a magic number. Consider defining it to a well named constant."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/subsonic-api/src/main/kotlin/org/moire/ultrasonic/api/subsonic/SubsonicError.kt:28:13",
        "message": "This expression contains a magic number. Consider defining it to a well named constant."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/subsonic-api/src/main/kotlin/org/moire/ultrasonic/api/subsonic/SubsonicError.kt:29:13",
        "message": "This expression contains a magic number. Consider defining it to a well named constant."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/subsonic-api/src/main/kotlin/org/moire/ultrasonic/api/subsonic/SubsonicError.kt:30:13",
        "message": "This expression contains a magic number. Consider defining it to a well named constant."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/subsonic-api/src/main/kotlin/org/moire/ultrasonic/api/subsonic/SubsonicError.kt:31:13",
        "message": "This expression contains a magic number. Consider defining it to a well named constant."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/subsonic-api/src/main/kotlin/org/moire/ultrasonic/api/subsonic/SubsonicError.kt:32:13",
        "message": "This expression contains a magic number. Consider defining it to a well named constant."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/subsonic-api/src/main/kotlin/org/moire/ultrasonic/api/subsonic/SubsonicError.kt:33:13",
        "message": "This expression contains a magic number. Consider defining it to a well named constant."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/subsonic-api/src/main/kotlin/org/moire/ultrasonic/api/subsonic/SubsonicError.kt:34:13",
        "message": "This expression contains a magic number. Consider defining it to a well named constant."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/subsonic-api/src/main/kotlin/org/moire/ultrasonic/api/subsonic/SubsonicError.kt:35:13",
        "message": "This expression contains a magic number. Consider defining it to a well named constant."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/subsonic-api/src/main/kotlin/org/moire/ultrasonic/api/subsonic/response/StreamResponse.kt:20:72",
        "message": "This expression contains a magic number. Consider defining it to a well named constant."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/subsonic-api/src/main/kotlin/org/moire/ultrasonic/api/subsonic/response/StreamResponse.kt:20:77",
        "message": "This expression contains a magic number. Consider defining it to a well named constant."
      }]
    }, {
      "name": "UseDataClass",
      "description": "Classes that do nothing but hold data should be replaced with a data class.",
      "instances": [{
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/subsonic-api/src/main/kotlin/org/moire/ultrasonic/api/subsonic/response/ChatMessagesResponse.kt:18:1",
        "message": "The class ChatMessagesWrapper defines nofunctionality and only holds data. Consider converting it to a data class."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/subsonic-api/src/main/kotlin/org/moire/ultrasonic/api/subsonic/response/MusicFoldersResponse.kt:18:1",
        "message": "The class MusicFoldersWrapper defines nofunctionality and only holds data. Consider converting it to a data class."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/subsonic-api/src/main/kotlin/org/moire/ultrasonic/api/subsonic/response/GetSongsByGenreResponse.kt:18:1",
        "message": "The class SongsByGenreWrapper defines nofunctionality and only holds data. Consider converting it to a data class."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/subsonic-api/src/main/kotlin/org/moire/ultrasonic/api/subsonic/response/GetPodcastsResponse.kt:19:1",
        "message": "The class PodcastChannelWrapper defines nofunctionality and only holds data. Consider converting it to a data class."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/subsonic-api/src/main/kotlin/org/moire/ultrasonic/api/subsonic/response/GetPlaylistsResponse.kt:20:1",
        "message": "The class PlaylistsWrapper defines nofunctionality and only holds data. Consider converting it to a data class."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/subsonic-api/src/main/kotlin/org/moire/ultrasonic/api/subsonic/response/SharesResponse.kt:18:1",
        "message": "The class SharesWrapper defines nofunctionality and only holds data. Consider converting it to a data class."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/subsonic-api/src/main/kotlin/org/moire/ultrasonic/api/subsonic/response/GetRandomSongsResponse.kt:19:1",
        "message": "The class RandomSongsWrapper defines nofunctionality and only holds data. Consider converting it to a data class."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/subsonic-api/src/main/kotlin/org/moire/ultrasonic/api/subsonic/response/GetAlbumListResponse.kt:19:1",
        "message": "The class AlbumWrapper defines nofunctionality and only holds data. Consider converting it to a data class."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/subsonic-api/src/main/kotlin/org/moire/ultrasonic/api/subsonic/response/GetAlbumList2Response.kt:20:1",
        "message": "The class AlbumWrapper2 defines nofunctionality and only holds data. Consider converting it to a data class."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/subsonic-api/src/main/kotlin/org/moire/ultrasonic/api/subsonic/response/VideosResponse.kt:18:1",
        "message": "The class VideosWrapper defines nofunctionality and only holds data. Consider converting it to a data class."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/subsonic-api/src/main/kotlin/org/moire/ultrasonic/api/subsonic/response/BookmarksResponse.kt:18:1",
        "message": "The class BookmarkWrapper defines nofunctionality and only holds data. Consider converting it to a data class."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/subsonic-api/src/main/kotlin/org/moire/ultrasonic/api/subsonic/response/GenresResponse.kt:17:1",
        "message": "The class GenresWrapper defines nofunctionality and only holds data. Consider converting it to a data class."
      }]
    }, {
      "name": "UnusedPrivateMember",
      "description": "Private member is unused.",
      "instances": [{
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/subsonic-api/src/main/kotlin/org/moire/ultrasonic/api/subsonic/models/AlbumListType.kt:41:9",
        "message": "Private function contains is unused."
      }]
    }, {
      "name": "ExpressionBodySyntax",
      "description": "Functions with exact one statement, the return statement, can be rewritten with ExpressionBodySyntax.",
      "instances": [{
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/subsonic-api/src/main/kotlin/org/moire/ultrasonic/api/subsonic/models/AlbumListType.kt:21:37",
        "message": "Functions with exact one statement, the return statement, can be rewritten with ExpressionBodySyntax."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/subsonic-api/src/main/kotlin/org/moire/ultrasonic/api/subsonic/models/JukeboxAction.kt:21:37",
        "message": "Functions with exact one statement, the return statement, can be rewritten with ExpressionBodySyntax."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/domain/src/main/kotlin/org/moire/ultrasonic/domain/Share.kt:20:35",
        "message": "Functions with exact one statement, the return statement, can be rewritten with ExpressionBodySyntax."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/domain/src/main/kotlin/org/moire/ultrasonic/domain/Version.kt:12:49",
        "message": "Functions with exact one statement, the return statement, can be rewritten with ExpressionBodySyntax."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/domain/src/main/kotlin/org/moire/ultrasonic/domain/Version.kt:23:56",
        "message": "Functions with exact one statement, the return statement, can be rewritten with ExpressionBodySyntax."
      }]
    }, {
      "name": "WildcardImport",
      "description": "Wildcard imports should be replaced with imports using fully qualified class names. Wildcard imports can lead to naming conflicts. A library update can introduce naming clashes with your classes which results in compilation errors.",
      "instances": [{
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/subsonic-api/src/main/kotlin/org/moire/ultrasonic/api/subsonic/SubsonicAPIDefinition.kt:6:1",
        "message": "org.moire.ultrasonic.api.subsonic.response.* is a wildcard import. Replace it with fully qualified imports."
      }]
    }, {
      "name": "DataClassContainsFunctions",
      "description": "Data classes should mainly be used to store data and should not have any extra functions. (Compiler will automatically generate equals, toString and hashCode functions)",
      "instances": [{
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/domain/src/main/kotlin/org/moire/ultrasonic/domain/Share.kt:20:5",
        "message": "The data class Share contains functions which are not registered conversion functions. The offending method is called getEntries"
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/domain/src/main/kotlin/org/moire/ultrasonic/domain/Share.kt:24:5",
        "message": "The data class Share contains functions which are not registered conversion functions. The offending method is called addEntry"
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/albertolalanda-new-ultrasonic-fork-for-MyMusicQoE/domain/src/main/kotlin/org/moire/ultrasonic/domain/MusicDirectory.kt:71:9",
        "message": "The data class Entry contains functions which are not registered conversion functions. The offending method is called setDuration"
      }]
    }]
  }]
}