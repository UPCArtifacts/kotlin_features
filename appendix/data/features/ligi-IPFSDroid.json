{
  "complexity_metrics": {
    "loc": 815,
    "sloc": 646,
    "lloc": 418,
    "cloc": 4,
    "mcc": 126,
    "n_smell": 41,
    "comment_ratio": 0,
    "mcc_per_thlines": 301
  },
  "metrics": {
    "number_of_string": 84,
    "number_of_string_template": 9,
    "number_of_inline_func": 0,
    "number_of_inferred_fun": 19,
    "number_of_inferred_var": 47,
    "number_of_objects_declarations": 3,
    "number_of_companion_objects": 0,
    "number_of_singletons": 2,
    "number_of_declaration": 58,
    "number_of_var_declaration": 58,
    "number_of_func_call": 322,
    "number_of_arguments": 235,
    "number_of_parameters": 54,
    "number_of_qualified_expressions": 370,
    "number_of_inheritances": 7,
    "number_of_unsafe_calls": 9,
    "number_of_safe_calls": 9,
    "number_of_destructuring_declarations": 0,
    "number_of_when_expressions": 8,
    "number_of_functions_with_default_value": 0,
    "number_of_function_call_with_named_value": 3,
    "number_of_named_argument": 3,
    "number_of_argument_with_default_value": 0,
    "number_of_overloaded_op": 0,
    "number_of_extension_function": 1,
    "number_of_properties_delegation": 2,
    "number_of_super_delegation": 0,
    "number_of_ranges": 0,
    "number_of_lambdas": 31,
    "number_of_possible_smart_casts": 0,
    "number_of_data_class": 0,
    "number_of_properties": 58,
    "number_of_functions": 50,
    "number_of_interfaces": 0,
    "number_of_classes": 14,
    "number_of_packages": 3,
    "number_of_kts_files": 0,
    "number_of_kt_files": 12
  },
  "findings": [{
    "group": "complexity",
    "smells": [{
      "name": "LabeledExpression",
      "description": "Expression with labels increase complexity and affect maintainability.",
      "instances": [{
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/ligi-IPFSDroid/app/src/main/java/org/ligi/ipfsdroid/activities/PublishIPFSContentActivity.kt:13:13",
        "message": "Expression with labels increase complexity and affect maintainability."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/ligi-IPFSDroid/app/src/main/java/org/ligi/ipfsdroid/activities/IPFSBrowseActivity.kt:51:37",
        "message": "Expression with labels increase complexity and affect maintainability."
      }]
    }]
  }, {
    "group": "empty-blocks",
    "smells": [{
      "name": "EmptyCatchBlock",
      "description": "Empty block of code detected. As they serve no purpose they should be removed.",
      "instances": [{
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/ligi-IPFSDroid/app/src/main/java/org/ligi/ipfsdroid/InputStreamProvider.kt:38:44",
        "message": "This empty block of code can be removed."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/ligi-IPFSDroid/app/src/main/java/org/ligi/ipfsdroid/InputStreamProvider.kt:39:34",
        "message": "This empty block of code can be removed."
      }]
    }]
  }, {
    "group": "exceptions",
    "smells": [{
      "name": "PrintStackTrace",
      "description": "Do not print an stack trace. These debug statements should be replaced with a logger or removed.",
      "instances": [{
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/ligi-IPFSDroid/app/src/main/java/org/ligi/ipfsdroid/IPFSDaemonService.kt:39:13",
        "message": "Do not print an stack trace. These debug statements should be replaced with a logger or removed."
      }]
    }]
  }, {
    "group": "naming",
    "smells": [{
      "name": "VariableNaming",
      "description": "Variable names should follow the naming convention set in the projects configuration.",
      "instances": [{
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/ligi-IPFSDroid/app/src/main/java/org/ligi/ipfsdroid/IPFSDaemonService.kt:15:5",
        "message": "Variable names should match the pattern: [a-z][A-Za-z0-9]*"
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/ligi-IPFSDroid/app/src/main/java/org/ligi/ipfsdroid/activities/DetailsActivity.kt:28:5",
        "message": "Variable names should match the pattern: [a-z][A-Za-z0-9]*"
      }]
    }]
  }, {
    "group": "potential-bugs",
    "smells": [{
      "name": "UnsafeCallOnNullableType",
      "description": "It will throw a NullPointerException at runtime if your nullable value is null.",
      "instances": [{
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/ligi-IPFSDroid/app/src/main/java/org/ligi/ipfsdroid/IPFSDaemonService.kt:32:9",
        "message": "Calling !! on a nullable type will throw a NullPointerException at runtime in case the value is null. It should be avoided."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/ligi-IPFSDroid/app/src/main/java/org/ligi/ipfsdroid/IPFSDaemonService.kt:37:13",
        "message": "Calling !! on a nullable type will throw a NullPointerException at runtime in case the value is null. It should be avoided."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/ligi-IPFSDroid/app/src/main/java/org/ligi/ipfsdroid/IPFSDaemonService.kt:44:9",
        "message": "Calling !! on a nullable type will throw a NullPointerException at runtime in case the value is null. It should be avoided."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/ligi-IPFSDroid/app/src/main/java/org/ligi/ipfsdroid/activities/AddIPFSContentActivity.kt:70:48",
        "message": "Calling !! on a nullable type will throw a NullPointerException at runtime in case the value is null. It should be avoided."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/ligi-IPFSDroid/app/src/main/java/org/ligi/ipfsdroid/activities/HashTextAndBarcodeActivity.kt:46:15",
        "message": "Calling !! on a nullable type will throw a NullPointerException at runtime in case the value is null. It should be avoided."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/ligi-IPFSDroid/app/src/main/java/org/ligi/ipfsdroid/activities/PublishIPFSContentActivity.kt:24:48",
        "message": "Calling !! on a nullable type will throw a NullPointerException at runtime in case the value is null. It should be avoided."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/ligi-IPFSDroid/app/src/main/java/org/ligi/ipfsdroid/activities/IPFSBrowseActivity.kt:29:25",
        "message": "Calling !! on a nullable type will throw a NullPointerException at runtime in case the value is null. It should be avoided."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/ligi-IPFSDroid/app/src/main/java/org/ligi/ipfsdroid/activities/IPFSBrowseActivity.kt:40:38",
        "message": "Calling !! on a nullable type will throw a NullPointerException at runtime in case the value is null. It should be avoided."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/ligi-IPFSDroid/app/src/main/java/org/ligi/ipfsdroid/activities/IPFSBrowseActivity.kt:52:41",
        "message": "Calling !! on a nullable type will throw a NullPointerException at runtime in case the value is null. It should be avoided."
      }]
    }, {
      "name": "UnsafeCast",
      "description": "Cast operator throws an exception if the cast is not possible.",
      "instances": [{
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/ligi-IPFSDroid/app/src/main/java/org/ligi/ipfsdroid/IPFSDaemonService.kt:31:20",
        "message": "getSystemService(Context.NOTIFICATION_SERVICE) cannot be safely cast to NotificationManager."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/ligi-IPFSDroid/app/src/main/java/org/ligi/ipfsdroid/activities/HashTextAndBarcodeActivity.kt:48:40",
        "message": "getSystemService(CLIPBOARD_SERVICE) cannot be safely cast to ClipboardManager."
      }]
    }, {
      "name": "LateinitUsage",
      "description": "Usage of lateinit detected. Using lateinit for property initialization is error prone, try using constructor injection or delegation.",
      "instances": [{
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/ligi-IPFSDroid/app/src/main/java/org/ligi/ipfsdroid/activities/MainActivity.kt:25:5",
        "message": "Usages of latinit should be avoided."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/ligi-IPFSDroid/app/src/main/java/org/ligi/ipfsdroid/activities/DetailsActivity.kt:24:5",
        "message": "Usages of latinit should be avoided."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/ligi-IPFSDroid/app/src/main/java/org/ligi/ipfsdroid/activities/HashTextAndBarcodeActivity.kt:25:5",
        "message": "Usages of latinit should be avoided."
      }]
    }]
  }, {
    "group": "style",
    "smells": [{
      "name": "MagicNumber",
      "description": "Report magic numbers. Magic number is a numeric literal that is not defined as a constant and hence it's unclear what the purpose of this number is. It's better to declare such numbers as constants and give them a proper name. By default, -1, 0, 1, and 2 are not considered to be magic numbers.",
      "instances": [{
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/ligi-IPFSDroid/app/src/main/java/org/ligi/ipfsdroid/di/AppModule.kt:16:32",
        "message": "This expression contains a magic number. Consider defining it to a well named constant."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/ligi-IPFSDroid/app/src/main/java/org/ligi/ipfsdroid/di/AppModule.kt:17:29",
        "message": "This expression contains a magic number. Consider defining it to a well named constant."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/ligi-IPFSDroid/app/src/main/java/org/ligi/ipfsdroid/IPFSDaemonService.kt:15:36",
        "message": "This expression contains a magic number. Consider defining it to a well named constant."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/ligi-IPFSDroid/app/src/main/java/org/ligi/ipfsdroid/InputStreamProvider.kt:52:121",
        "message": "This expression contains a magic number. Consider defining it to a well named constant."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/ligi-IPFSDroid/app/src/main/java/org/ligi/ipfsdroid/activities/DetailsActivity.kt:37:38",
        "message": "This expression contains a magic number. Consider defining it to a well named constant."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/ligi-IPFSDroid/app/src/main/java/org/ligi/ipfsdroid/activities/DetailsActivity.kt:77:16",
        "message": "This expression contains a magic number. Consider defining it to a well named constant."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/ligi-IPFSDroid/app/src/main/java/org/ligi/ipfsdroid/activities/DetailsActivity.kt:129:35",
        "message": "This expression contains a magic number. Consider defining it to a well named constant."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/ligi-IPFSDroid/app/src/main/java/org/ligi/ipfsdroid/IPFSDaemon.kt:85:40",
        "message": "This expression contains a magic number. Consider defining it to a well named constant."
      }]
    }, {
      "name": "MaxLineLength",
      "description": "Line detected that is longer than the defined maximum line length in the code style.",
      "instances": [{
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/ligi-IPFSDroid/app/src/main/java/org/ligi/ipfsdroid/IPXSResource.kt:34:169",
        "message": "Line detected that is longer than the defined maximum line length in the code style."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/ligi-IPFSDroid/app/src/main/java/org/ligi/ipfsdroid/IPXSResource.kt:45:125",
        "message": "Line detected that is longer than the defined maximum line length in the code style."
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/ligi-IPFSDroid/app/src/main/java/org/ligi/ipfsdroid/InputStreamProvider.kt:52:127",
        "message": "Line detected that is longer than the defined maximum line length in the code style."
      }]
    }, {
      "name": "OptionalWhenBraces",
      "description": "Optional braces in when expression",
      "instances": [{
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/ligi-IPFSDroid/app/src/main/java/org/ligi/ipfsdroid/IPXSResource.kt:16:13",
        "message": "Optional braces in when expression"
      }]
    }, {
      "name": "UseDataClass",
      "description": "Classes that do nothing but hold data should be replaced with a data class.",
      "instances": [{
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/ligi-IPFSDroid/app/src/main/java/org/ligi/ipfsdroid/InputStreamProvider.kt:16:5",
        "message": "The class InputStreamWithSource defines nofunctionality and only holds data. Consider converting it to a data class."
      }]
    }, {
      "name": "WildcardImport",
      "description": "Wildcard imports should be replaced with imports using fully qualified class names. Wildcard imports can lead to naming conflicts. A library update can introduce naming clashes with your classes which results in compilation errors.",
      "instances": [{
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/ligi-IPFSDroid/app/src/main/java/org/ligi/ipfsdroid/activities/MainActivity.kt:13:1",
        "message": "org.ligi.ipfsdroid.* is a wildcard import. Replace it with fully qualified imports."
      }]
    }, {
      "name": "SpacingBetweenPackageAndImports",
      "description": "Violation of the package declaration style.",
      "instances": [{
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/ligi-IPFSDroid/app/src/main/java/org/ligi/ipfsdroid/activities/MainActivity.kt:18:27",
        "message": "There should be exactly one empty line in between the list of imports and the declaration of MainActivity."
      }]
    }, {
      "name": "UnnecessaryParentheses",
      "description": "Unnecessary parentheses don't add any value to the code and should be removed.",
      "instances": [{
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/ligi-IPFSDroid/app/src/main/java/org/ligi/ipfsdroid/activities/MainActivity.kt:112:36",
        "message": "Parentheses in (ipfsDaemon.isReady() && !State.isDaemonRunning) are unnecessary and can be replaced with: ipfsDaemon.isReady() && !State.isDaemonRunning"
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/ligi-IPFSDroid/app/src/main/java/org/ligi/ipfsdroid/activities/MainActivity.kt:120:53",
        "message": "Parentheses in (currentVersionText != availableVersionText) are unnecessary and can be replaced with: currentVersionText != availableVersionText"
      }, {
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/ligi-IPFSDroid/app/src/main/java/org/ligi/ipfsdroid/activities/DetailsActivity.kt:79:35",
        "message": "Parentheses around the lambda ({\n            try {\n                val intent = Intent(Intent.ACTION_OPEN_DOCUMENT)\n                intent.addCategory(Intent.CATEGORY_OPENABLE)\n                intent.type = \"*/*\" // tried with octet stream - no use\n                startActivityForResult(intent, OPEN_FILE_READ_REQUEST_CODE)\n            } catch (e: ActivityNotFoundException) {\n                Snackbar.make(addFile, \"Unavailable\", Snackbar.LENGTH_LONG).show()\n            }\n        }) are unnecessary and can be removed."
      }]
    }, {
      "name": "CollapsibleIfStatements",
      "description": "Two if statements which could be collapsed were detected. These statements can be merged to improve readability.",
      "instances": [{
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/ligi-IPFSDroid/app/src/main/java/org/ligi/ipfsdroid/activities/DetailsActivity.kt:67:9",
        "message": "Two if statements which could be collapsed were detected. These statements can be merged to improve readability."
      }]
    }, {
      "name": "NewLineAtEndOfFile",
      "description": "Checks whether files end with a line separator.",
      "instances": [{
        "location": "/Users/brunomateus/Doutorado/Experimento2/repos_MSR/ligi-IPFSDroid/app/src/main/java/org/ligi/ipfsdroid/IPFSDaemon.kt:92:1",
        "message": "The file IPFSDaemon.kt is not ending with a new line."
      }]
    }]
  }]
}